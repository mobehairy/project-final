pipeline {
	agent any
	stages {

<<<<<<< HEAD
		stage('Create kubernetes cluster') {
=======
		stage('Lint HTML') {
			steps {
				sh 'tidy -q -e *.html'
			}
		}
		
		stage('Lint Dockerfile')  {
		    steps {
			    sh 'hadolint Dockerfile'
			}
		}
		
		stage('Build Docker Image') {
			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'mbehairy', usernameVariable: 'mbehairy', passwordVariable: 'P@ss@2020']]){
					sh '''
						sudo docker build -t mbehairy/capstone .
					'''
				}
			}
		}

		stage('Push Image To Dockerhub') {
			steps {
				withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'mbehairy', usernameVariable: 'mbehairy', passwordVariable: 'P@ss@2020']]){
					sh '''
						sudo docker login -u mbehairy -p P@ss@2020
						sudo docker push mbehairy/capstone
					'''
				}
			}
		}

		stage('Set current kubectl context') {
			steps {
				withAWS(region:'us-east-2', credentials:'ecr_credentials') {
					sh '''
						kubectl config use-context arn:aws:eks:us-east-2:142977788479:cluster/capstonecluster
					'''
				}
			}
		}

		stage('Deploy blue container') {
>>>>>>> 8cba501b73e3acb59629ad15d08b9bc52fe44d5b
			steps {
				withAWS(region:'us-east-2', credentials:'ecr_credentials') {
					sh '''
						eksctl create cluster \
						--name project-final \
						--version 1.13 \
						--nodegroup-name standard-workers \
						--node-type t2.small \
						--nodes 2 \
						--nodes-min 1 \
						--nodes-max 3 \
						--node-ami auto \
						--region us-east-2 \
						--zones us-east-2a \
						--zones us-east-2b \
						--zones us-east-2c \
					'''
				}
			}
		}

		

		stage('Create conf file cluster') {
			steps {
				withAWS(region:'us-east-2', credentials:'ecr_credentials') {
					sh '''
						aws eks --region us-east-2 update-kubeconfig --name project-final
					'''
				}
			}
		}

	}
}
